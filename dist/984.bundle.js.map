{"version":3,"file":"984.bundle.js","mappings":"+KAMA,MAAMA,EAAQ,EAAU,6BAIjB,MAAMC,UAA0B,IACnC,WAAAC,GACIC,SAASC,WACTC,KAAKC,UAAY,IAAI,GACzB,CACA,kCAAaC,CAAsBC,GAC/B,MAAmE,eAArDA,EAAUC,UAAU,OAAcC,cACpD,CACA,WAAMC,GACF,UACUN,KAAKO,YACf,CACA,MAAOC,GACH,KAAIA,aAAe,MAIf,MAAMA,EAHNb,EAAM,gBAKd,CACJ,CACA,QAAAc,GAEA,CACA,gBAAMF,GAIF,SAHMP,KAAKU,sBACXf,EAAM,iDAAkDK,KAAKG,UAAUQ,gBACjEX,KAAKY,iBACPZ,KAAKa,QAAQC,iBAAmBd,KAAKe,SAASC,SAC9ChB,KAAKS,eAEJ,CACD,MAAMQ,EAAc,IAAI,KAAYjB,KAAKe,SAAUf,KAAKG,UAAWH,KAAKa,eAClEI,EAAYX,QAClBN,KAAKS,UACT,CACJ,CACA,yBAAMC,GAEF,GAAiC,eADTV,KAAKG,UAAUC,UAAU,OACnCC,eAGV,OAFAV,EAAM,6BAA8BK,KAAKG,UAAUQ,gBAC7CX,KAAKC,UAAUK,MAAMN,KAAKe,SAAUf,KAAKG,UAAWH,KAAKa,SACxDb,KAAKU,qBAEpB,E,sHCnDJ,MAAMf,EAAQ,EAAU,sCAClBuB,EAAY,IAAI,aAAiB,EAAG,UAKpCC,EAAW,CACbC,IAAK,EACLC,IAAK,CAACC,EAAKC,KACA,CACHC,IAAK,YAAgBH,IAAIC,EAAKC,GAC9BE,cAAe,QAAYJ,IAAIC,EAAKC,EAAM,MAQhDG,EAAW,CACbN,IAAK,EACLC,IAAK,CAACC,EAAKC,KACA,CACHI,gBAAiB,CAAC,MAAO,KAAO,MAAO,MAAO,KAA0BL,EAAKC,EAAK,EAAG,IACrFK,aAAc,KAA0BN,EAAKC,EAAK,EAAG,GACrDM,aAAc,KAA0BP,EAAKC,EAAM,EAAG,EAAG,GAAK,EAC9DO,OAAQ,KAAcR,EAAKC,EAAM,EAAG,GACpCQ,iBAAkB,KAA0BT,EAAKC,EAAM,EAAG,EAAG,MAIlE,MAAMS,EACT,WAAAnC,CAAYM,GACRH,KAAKG,UAAYA,CACrB,CACA,sBAAM8B,GACF,MAAMC,QAAYlC,KAAKG,UAAUgC,UAAUjB,GACrCkB,QAAapC,KAAKqC,wBACxB,MAAO,CACHH,MACAI,cAAeF,EAAKG,MAAQ,EAAIH,EAAKhB,IAE7C,CACA,sBAAMoB,CAAiBJ,GACnB,MAAMK,EAAe,CAAC,EACtB9C,EAAM,wBAAwBK,KAAKG,UAAUQ,YAC7C,MAAM+B,QAAc1C,KAAKG,UAAUgC,UAAUhB,GAC7CiB,GAAQjB,EAASC,IACjBuB,OAAOC,OAAOH,EAAcC,GAC5B/C,EAAM,sBAAsB+C,EAAMjB,iBAClC,MAAMoB,QAAoB7C,KAAKqC,wBAC/BD,GAAQS,EAAYzB,IACpBqB,EAAaI,YAAcA,EAAYN,MACvC,MAAMO,QAAW9C,KAAKqC,wBACtBD,GAAQU,EAAG1B,IACXqB,EAAaM,mBAAqBD,EAAGP,MACrC,MAAMS,QAAchD,KAAKG,UAAUgC,UAAUT,GAK7C,OAJAU,GAAQV,EAASN,IACjBuB,OAAOC,OAAOH,EAAcO,SAEtBhD,KAAKG,UAAU8C,OAAOb,GACrBK,CACX,CACA,2BAAMJ,CAAsBjB,EAAM,EAAG8B,EAAK,GACtC,IAAIC,QAAUnD,KAAKG,UAAUiD,WAAW,SACxC,OAAS,IAAJD,GAGLA,GAAK,IACLA,GAAKD,EACElD,KAAKqC,sBAAsBjB,EAAM,EAAG+B,GAAK,IAJrC,CAAE/B,MAAKmB,MAAOW,EAAKC,EAKlC,E,aCzEG,MAAME,WAA6B,QAA+B,cCKzE,MAAM,EAAQ,EAAU,kCACjB,MAAMC,UAAqBC,EAAA,EAC9B,WAAA1D,GACIC,SAASC,WACTC,KAAKwD,YAAc,CACvB,CACA,WAAMlD,GAEF,GAAkB,eADMN,KAAKG,UAAUgC,UAAU,KAE7C,MAAM,IAAIkB,EAAqB,wBAEnC,OADArD,KAAKe,SAAS0C,UAAU,YAAa,iBAC9BzD,KAAK0D,aAChB,CACA,iBAAMA,GACF,MAAMC,EAAY,IAAI,EAAiB3D,KAAKG,WAC5C,OAAG,CACC,MAAMyD,QAAeD,EAAU1B,mBAE/B,OADA,EAAM,qBAAqB2B,EAAO1B,sBAAsB0B,EAAOtB,iBACvDsB,EAAO1B,KACX,IAAK,KAAM,CACP,MAAM2B,QAAWF,EAAUnB,iBAAiBoB,EAAOtB,eACnDtC,KAAKe,SAAS0C,UAAU,kBAAmBI,EAAGhB,aAC9C7C,KAAKe,SAAS0C,UAAU,aAAcI,EAAGlC,iBACzC3B,KAAKe,SAAS0C,UAAU,WAAYI,EAAGhB,YAAcgB,EAAGlC,iBACxD3B,KAAKe,SAAS0C,UAAU,mBAAoBI,EAAGhC,cAC/C,KACJ,CACA,IAAK,KACD7B,KAAKwD,aAAeI,EAAOtB,oBACrBtC,KAAKG,UAAU8C,OAAOW,EAAOtB,eACnC,MACJ,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,WACKtC,KAAKG,UAAU8C,OAAOW,EAAOtB,eACnC,MACJ,IAAK,KAID,OAHItC,KAAKe,SAAS+C,OAAOC,UACrB/D,KAAKe,SAAS0C,UAAU,UAA8B,EAAnBzD,KAAKwD,YAAkBxD,KAAKe,SAAS+C,OAAOC,UAE5EC,EAAY,YAAAC,kBAAkBjE,KAAKe,SAAUf,KAAKG,UAAWH,KAAKa,SAC7E,QACI,MAAM,IAAIwC,EAAqB,sBAAsBO,EAAO1B,OAExE,CACJ,ECpDG,MAAMgC,EACT,WAAArE,CAAYM,GACRH,KAAKG,UAAYA,EACjBH,KAAKmE,IAAM,EACXnE,KAAKoE,MAAQ,IACjB,CAKA,UAAMC,CAAKC,GACP,KAAsB,OAAftE,KAAKoE,OACRpE,KAAKoE,YAAcpE,KAAKG,UAAUgC,UAAU,aAEhD,IAAIoC,EAAMvE,KAAKoE,MAEf,OADApE,KAAKmE,KAAOG,EACRtE,KAAKmE,IAAM,IACXI,KAAU,GAAKvE,KAAKmE,IACbI,GAAQ,GAAKD,GAAQ,IAEhCtE,KAAKmE,KAAO,GACK,IAAbnE,KAAKmE,KACLnE,KAAKoE,MAAQ,KACNG,GAAQ,GAAKD,GAAQ,IAEhCtE,KAAKoE,YAAcpE,KAAKG,UAAUgC,UAAU,aACxCnC,KAAKmE,MACLI,IAAQvE,KAAKmE,IACbI,GAAOvE,KAAKoE,QAAW,GAAKpE,KAAKmE,KAE9BI,GAAQ,GAAKD,GAAQ,GAChC,CACA,YAAMrB,CAAOqB,GACT,GAAItE,KAAKmE,IAAM,EAAG,CACd,MAAMK,EAAY,GAAKxE,KAAKmE,IAC5BnE,KAAKoE,MAAQ,KACbE,GAAQE,EACRxE,KAAKmE,IAAM,CACf,CACA,MAAMM,EAAYH,EAAO,GACnBI,GAAcJ,EAAOG,GAAa,GAExC,aADMzE,KAAKG,UAAU8C,OAAoB,EAAbyB,GACrB1E,KAAKqE,KAAKI,EACrB,ECvCG,MAAME,EAAS,CAClBvD,IAAK,GACLC,IAAK,CAACC,EAAKC,KACP,MAAMqC,EAAS,CAEXgB,UAAW,IAAIC,YAAY,UAAUC,OAAOxD,EAAIyD,SAASxD,EAAKA,EAAM,IAEpEyD,mBAAoB,KAA0B1D,EAAKC,EAAM,EAAG,EAAG,GAC/D0D,mBAAoB,KAA0B3D,EAAKC,EAAM,EAAG,EAAG,GAE/D2D,WAAY,YAAgB7D,IAAIC,EAAKC,EAAM,GAE3C4D,SAAU,YAAgB9D,IAAIC,EAAKC,EAAM,GACzCI,gBAAiB,CAAC,MAAO,KAAO,MAAO,MAAO,KAA0BL,EAAKC,EAAM,GAAI,EAAG,IAC1F6D,KAAM,KAA0B9D,EAAKC,EAAM,GAAI,EAAG,GAClD8D,QAAS,KAA0B/D,EAAKC,EAAM,GAAI,EAAG,GACrD+D,QAAS,KAA0BhE,EAAKC,EAAM,GAAI,EAAG,GACrDgE,gBAAiB,KAAcjE,EAAKC,EAAM,GAAI,GAC9CiE,cAAe,KAAclE,EAAKC,EAAM,GAAI,GAE5CkE,UAAW,YAAgBpE,IAAIC,EAAKC,EAAM,IAC1CmE,UAAW,YAAgBrE,IAAIC,EAAKC,EAAM,IAE1CoE,UAAW,YAAgBtE,IAAIC,EAAKC,EAAM,IAC1CqE,UAAW,YAAgBvE,IAAIC,EAAKC,EAAM,IAE1CsE,gBAAkB,YAAgBxE,IAAIC,EAAKC,EAAM,MAAQ,GAAM,KAC/DuE,YAAa,KAAcxE,EAAKC,EAAM,GAAI,IAG9C,OADAqC,EAAOiC,gBAAkBjC,EAAOkC,YAAe,YAAgBzE,IAAIC,EAAK,MAAQ,GAAM,KAAQ,EACvFsC,CAAM,GC7Bf,EAAQ,EAAU,kCACjB,MAAMmC,UAAqBxC,EAAA,EAC9B,WAAA1D,GACIC,SAASC,WACTC,KAAKgG,UAAY,KACjBhG,KAAKwD,YAAc,EACnBxD,KAAK+D,SAAW,IACpB,CACA,WAAMzD,GACF,MAAMsD,QAAe5D,KAAKG,UAAUgC,UAAU,GAC9C,GAAyB,QAArByB,EAAOgB,UACP,MAAM,IAAIvB,EAAqB,2BACnC,EAAM,kBAAkBO,EAAOqB,sBAAsBrB,EAAOoB,sBAC5DhF,KAAKe,SAAS0C,UAAU,YAAa,iBACrCzD,KAAKe,SAAS0C,UAAU,aAAcG,EAAOjC,iBAC7C,MAAMsE,EAAkB,MAAQrC,EAAOsB,WAAa,GAAKtB,EAAOiC,gBAChE7F,KAAKe,SAAS0C,UAAU,kBAAmBwC,GAC3CjG,KAAK+D,SAAWkC,EAAkBrC,EAAOjC,gBACzC3B,KAAKe,SAAS0C,UAAU,WAAYzD,KAAK+D,UACzC/D,KAAKgG,UAAY,IAAI9B,EAAUlE,KAAKG,WACpCH,KAAKe,SAAS0C,UAAU,mBAAoBG,EAAO4B,eAAiB5B,EAAO2B,gBAAkB,EAAI,GACjG,MAAMW,QAAgBlG,KAAKgG,UAAU3B,KAAK,GAI1C,OAHArE,KAAKe,SAAS0C,UAAU,SAAUyC,EAAU,KAAKC,QAAQ,UACnDnG,KAAKoG,cAAcxC,EAAOsB,YAChC,EAAM,mDAAmDlF,KAAKG,UAAUQ,YACjEqD,EAAY,YAAAC,kBAAkBjE,KAAKe,SAAUf,KAAKG,UAAWH,KAAKa,QAC7E,CACA,mBAAMuF,CAAclB,GAChB,KAAOA,KAAe,GAAG,CACrB,MAAMmB,QAAoBrG,KAAKgG,UAAU3B,KAAK,IAC9CrE,KAAKwD,aAAe,GAAK6C,QACnBrG,KAAKgG,UAAU/C,OAAOoD,EAChC,CAEA,MAAMR,QAAwB7F,KAAKgG,UAAU3B,KAAK,IAClDrE,KAAKwD,aAAeqC,EACE,OAAlB7F,KAAK+D,UACL/D,KAAKe,SAAS0C,UAAU,UAAWzD,KAAKwD,YAAcxD,KAAK+D,SAEnE,ECvCJ,MAAM,EAAQ,EAAU,kCACjB,MAAMuC,UAAuB1G,EAAA,EAChC,oBAAMgB,GAEF,IAAI2F,EACJ,aAFwBvG,KAAKG,UAAUC,UAAU,IAAI,aAAiB,EAAG,YAGrE,IAAK,MACD,EAAM,oBACNmG,EAAY,IAAIR,EAAa/F,KAAKe,SAAUf,KAAKG,UAAWH,KAAKa,SACjE,MAEJ,IAAK,MACD,EAAM,oBACN0F,EAAY,IAAIjD,EAAatD,KAAKe,SAAUf,KAAKG,UAAWH,KAAKa,SACjE,MAEJ,QACI,MAAM,IAAIwC,EAAqB,4BAGvC,OAAOkD,EAAUjG,OACrB,E","sources":["webpack://audioshop/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js","webpack://audioshop/./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js","webpack://audioshop/./node_modules/music-metadata/lib/musepack/MusepackConentError.js","webpack://audioshop/./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js","webpack://audioshop/./node_modules/music-metadata/lib/musepack/sv7/BitReader.js","webpack://audioshop/./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js","webpack://audioshop/./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js","webpack://audioshop/./node_modules/music-metadata/lib/musepack/MusepackParser.js"],"sourcesContent":["import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map","import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../../common/Util.js';\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'latin1');\n/**\n * Stream Header Packet part 1\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part1 = {\n    len: 5,\n    get: (buf, off) => {\n        return {\n            crc: Token.UINT32_LE.get(buf, off),\n            streamVersion: Token.UINT8.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Stream Header Packet part 3\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part3 = {\n    len: 2,\n    get: (buf, off) => {\n        return {\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n            msUsed: util.isBitSet(buf, off + 1, 4),\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\n        };\n    }\n};\nexport class StreamReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n    async readPacketHeader() {\n        const key = await this.tokenizer.readToken(PacketKey);\n        const size = await this.readVariableSizeField();\n        return {\n            key,\n            payloadLength: size.value - 2 - size.len\n        };\n    }\n    async readStreamHeader(size) {\n        const streamHeader = {};\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\n        const part1 = await this.tokenizer.readToken(SH_part1);\n        size -= SH_part1.len;\n        Object.assign(streamHeader, part1);\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\n        const sampleCount = await this.readVariableSizeField();\n        size -= sampleCount.len;\n        streamHeader.sampleCount = sampleCount.value;\n        const bs = await this.readVariableSizeField();\n        size -= bs.len;\n        streamHeader.beginningOfSilence = bs.value;\n        const part3 = await this.tokenizer.readToken(SH_part3);\n        size -= SH_part3.len;\n        Object.assign(streamHeader, part3);\n        // assert.equal(size, 0);\n        await this.tokenizer.ignore(size);\n        return streamHeader;\n    }\n    async readVariableSizeField(len = 1, hb = 0) {\n        let n = await this.tokenizer.readNumber(Token.UINT8);\n        if ((n & 0x80) === 0) {\n            return { len, value: hb + n };\n        }\n        n &= 0x7F;\n        n += hb;\n        return this.readVariableSizeField(len + 1, n << 7);\n    }\n}\n//# sourceMappingURL=StreamVersion8.js.map","import { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class MusepackContentError extends makeUnexpectedFileContentError('Musepack') {\n}\n//# sourceMappingURL=MusepackConentError.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport * as SV8 from './StreamVersion8.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv8Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const signature = await this.tokenizer.readToken(FourCcToken);\n        if (signature !== 'MPCK')\n            throw new MusepackContentError('Invalid Magic number');\n        this.metadata.setFormat('container', 'Musepack, SV8');\n        return this.parsePacket();\n    }\n    async parsePacket() {\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\n        do {\n            const header = await sv8reader.readPacketHeader();\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n            switch (header.key) {\n                case 'SH': { // Stream Header\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                    break;\n                }\n                case 'AP': // Audio Packet\n                    this.audioLength += header.payloadLength;\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'RG': // Replaygain\n                case 'EI': // Encoder Info\n                case 'SO': // Seek Table Offset\n                case 'ST': // Seek Table\n                case 'CT': // Chapter-Tag\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'SE': // Stream End\n                    if (this.metadata.format.duration) {\n                        this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                    }\n                    return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n                default:\n                    throw new MusepackContentError(`Unexpected header: ${header.key}`);\n            }\n        } while (true);\n    }\n}\n//# sourceMappingURL=MpcSv8Parser.js.map","import * as Token from 'token-types';\nexport class BitReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n        this.pos = 0;\n        this.dword = null;\n    }\n    /**\n     *\n     * @param bits 1..30 bits\n     */\n    async read(bits) {\n        while (this.dword === null) {\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        }\n        let out = this.dword;\n        this.pos += bits;\n        if (this.pos < 32) {\n            out >>>= (32 - this.pos);\n            return out & ((1 << bits) - 1);\n        }\n        this.pos -= 32;\n        if (this.pos === 0) {\n            this.dword = null;\n            return out & ((1 << bits) - 1);\n        }\n        this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        if (this.pos) {\n            out <<= this.pos;\n            out |= this.dword >>> (32 - this.pos);\n        }\n        return out & ((1 << bits) - 1);\n    }\n    async ignore(bits) {\n        if (this.pos > 0) {\n            const remaining = 32 - this.pos;\n            this.dword = null;\n            bits -= remaining;\n            this.pos = 0;\n        }\n        const remainder = bits % 32;\n        const numOfWords = (bits - remainder) / 32;\n        await this.tokenizer.ignore(numOfWords * 4);\n        return this.read(remainder);\n    }\n}\n//# sourceMappingURL=BitReader.js.map","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * BASIC STRUCTURE\n */\nexport const Header = {\n    len: 6 * 4,\n    get: (buf, off) => {\n        const header = {\n            // word 0\n            signature: new TextDecoder('latin1').decode(buf.subarray(off, off + 3)),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\n            // word 1\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\n            // word 2\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\n            // word 3\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\n            // word 4\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\n            // word\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\n            trueGapless: util.isBitSet(buf, off + 23, 0)\n        };\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\n        return header;\n    }\n};\n//# sourceMappingURL=StreamVersion7.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\nimport { BitReader } from './BitReader.js';\nimport * as SV7 from './StreamVersion7.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv7Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.bitreader = null;\n        this.audioLength = 0;\n        this.duration = null;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new MusepackContentError('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        if (this.duration !== null) {\n            this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n        }\n    }\n}\n//# sourceMappingURL=MpcSv7Parser.js.map","import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { MpcSv8Parser } from './sv8/MpcSv8Parser.js';\nimport { MpcSv7Parser } from './sv7/MpcSv7Parser.js';\nimport { MusepackContentError } from './MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MusepackParser extends AbstractID3Parser {\n    async postId3v2Parse() {\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'latin1'));\n        let mpcParser;\n        switch (signature) {\n            case 'MP+': {\n                debug('Stream-version 7');\n                mpcParser = new MpcSv7Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            case 'MPC': {\n                debug('Stream-version 8');\n                mpcParser = new MpcSv8Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            default: {\n                throw new MusepackContentError('Invalid signature prefix');\n            }\n        }\n        return mpcParser.parse();\n    }\n}\n//# sourceMappingURL=MusepackParser.js.map"],"names":["debug","AbstractID3Parser","constructor","super","arguments","this","id3parser","startsWithID3v2Header","tokenizer","peekToken","fileIdentifier","parse","parseID3v2","err","finalize","tryReadId3v2Headers","position","postId3v2Parse","options","skipPostHeaders","metadata","hasAny","id3v1parser","PacketKey","SH_part1","len","get","buf","off","crc","streamVersion","SH_part3","sampleFrequency","maxUsedBands","channelCount","msUsed","audioBlockFrames","StreamReader","readPacketHeader","key","readToken","size","readVariableSizeField","payloadLength","value","readStreamHeader","streamHeader","part1","Object","assign","sampleCount","bs","beginningOfSilence","part3","ignore","hb","n","readNumber","MusepackContentError","MpcSv8Parser","BasicParser","audioLength","setFormat","parsePacket","sv8reader","header","sh","format","duration","APEv2Parser","tryParseApeHeader","BitReader","pos","dword","read","bits","out","remaining","remainder","numOfWords","Header","signature","TextDecoder","decode","subarray","streamMinorVersion","streamMajorVersion","frameCount","maxLevel","link","profile","maxBand","intensityStereo","midSideStereo","titlePeak","titleGain","albumPeak","albumGain","lastFrameLength","trueGapless","MpcSv7Parser","bitreader","numberOfSamples","version","toFixed","skipAudioData","frameLength","MusepackParser","mpcParser"],"sourceRoot":""}