{"version":3,"file":"628.bundle.js","mappings":"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","sources":["webpack://audioshop/./node_modules/music-metadata/lib/ogg/opus/Opus.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/opus/OpusParser.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/speex/Speex.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/theora/Theora.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/OggParser.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js","webpack://audioshop/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nexport class OpusContentError extends makeUnexpectedFileContentError('Opus') {\n}\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nexport class IdHeader {\n    constructor(len) {\n        this.len = len;\n        if (len < 19) {\n            throw new OpusContentError('ID-header-page 0 should be at least 19 bytes long');\n        }\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: Token.UINT8.get(buf, off + 8),\n            channelCount: Token.UINT8.get(buf, off + 9),\n            preSkip: Token.UINT16_LE.get(buf, off + 10),\n            inputSampleRate: Token.UINT32_LE.get(buf, off + 12),\n            outputGain: Token.UINT16_LE.get(buf, off + 16),\n            channelMapping: Token.UINT8.get(buf, off + 18)\n        };\n    }\n}\n//# sourceMappingURL=Opus.js.map","import * as Token from 'token-types';\nimport { VorbisParser } from '../vorbis/VorbisParser.js';\nimport * as Opus from './Opus.js';\nimport { OpusContentError } from './Opus.js';\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggParser\n */\nexport class OpusParser extends VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n        this.idHeader = null;\n        this.lastPos = -1;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new OpusContentError(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n    }\n    async parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                await this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\n//# sourceMappingURL=OpusParser.js.map","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexport const Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: Token.INT32_LE.get(buf, off + 28),\n            header_size: Token.INT32_LE.get(buf, off + 32),\n            rate: Token.INT32_LE.get(buf, off + 36),\n            mode: Token.INT32_LE.get(buf, off + 40),\n            mode_bitstream_version: Token.INT32_LE.get(buf, off + 44),\n            nb_channels: Token.INT32_LE.get(buf, off + 48),\n            bitrate: Token.INT32_LE.get(buf, off + 52),\n            frame_size: Token.INT32_LE.get(buf, off + 56),\n            vbr: Token.INT32_LE.get(buf, off + 60),\n            frames_per_packet: Token.INT32_LE.get(buf, off + 64),\n            extra_headers: Token.INT32_LE.get(buf, off + 68),\n            reserved1: Token.INT32_LE.get(buf, off + 72),\n            reserved2: Token.INT32_LE.get(buf, off + 76)\n        };\n    }\n};\n//# sourceMappingURL=Speex.js.map","import initDebug from 'debug';\nimport { VorbisParser } from '../vorbis/VorbisParser.js';\nimport * as Speex from './Speex.js';\nconst debug = initDebug('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nexport class SpeexParser extends VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n    }\n}\n//# sourceMappingURL=SpeexParser.js.map","import * as Token from 'token-types';\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexport const IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: Token.UINT8.get(buf, off + 7),\n            vmin: Token.UINT8.get(buf, off + 8),\n            vrev: Token.UINT8.get(buf, off + 9),\n            vmbw: Token.UINT16_BE.get(buf, off + 10),\n            vmbh: Token.UINT16_BE.get(buf, off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: Token.UINT8.get(buf, off + 40)\n        };\n    }\n};\n//# sourceMappingURL=Theora.js.map","import initDebug from 'debug';\nimport { IdentificationHeader } from './Theora.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nexport class TheoraParser {\n    constructor(metadata, options, tokenizer) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    async flush() {\n        debug('flush');\n    }\n    calculateDuration(header) {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    async parseFirstPage(header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n    }\n}\n//# sourceMappingURL=TheoraParser.js.map","import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport * as util from '../common/Util.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { VorbisParser } from './vorbis/VorbisParser.js';\nimport { OpusParser } from './opus/OpusParser.js';\nimport { SpeexParser } from './speex/SpeexParser.js';\nimport { TheoraParser } from './theora/TheoraParser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class OggContentError extends makeUnexpectedFileContentError('Ogg') {\n}\nconst debug = initDebug('music-metadata:parser:ogg');\nexport class SegmentTable {\n    static sum(buf, off, len) {\n        const dv = new DataView(buf.buffer, 0);\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += dv.getUint8(i);\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\n/**\n * Parser for Ogg logical bitstream framing\n */\nexport class OggParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.header = null;\n        this.pageNumber = 0;\n        this.pageConsumer = null;\n    }\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        debug('pos=%s, parsePage()', this.tokenizer.position);\n        try {\n            let header;\n            do {\n                header = await this.tokenizer.readToken(OggParser.Header);\n                if (header.capturePattern !== 'OggS')\n                    throw new OggContentError('Invalid Ogg capture pattern');\n                this.metadata.setFormat('container', 'Ogg');\n                this.header = header;\n                this.pageNumber = header.pageSequenceNo;\n                debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);\n                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));\n                debug('totalPageSize=%s', segmentTable.totalPageSize);\n                const pageData = await this.tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n                debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n                if (header.headerType.firstPage) {\n                    const id = new TextDecoder('ascii').decode(pageData.subarray(0, 7));\n                    switch (id) {\n                        case '\\x01vorbis': // Ogg/Vorbis\n                            debug('Set page consumer to Ogg/Vorbis');\n                            this.pageConsumer = new VorbisParser(this.metadata, this.options);\n                            break;\n                        case 'OpusHea': // Ogg/Opus\n                            debug('Set page consumer to Ogg/Opus');\n                            this.pageConsumer = new OpusParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'Speex  ': // Ogg/Speex\n                            debug('Set page consumer to Ogg/Speex');\n                            this.pageConsumer = new SpeexParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'fishead':\n                        case '\\x00theora': // Ogg/Theora\n                            debug('Set page consumer to Ogg/Theora');\n                            this.pageConsumer = new TheoraParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        default:\n                            throw new OggContentError(`gg audio-codec not recognized (id=${id})`);\n                    }\n                }\n                await this.pageConsumer.parsePage(header, pageData);\n            } while (!header.headerType.lastPage);\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                if (err instanceof EndOfStreamError) {\n                    this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                    debug(\"End-of-stream\");\n                    this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                    if (this.header) {\n                        this.pageConsumer.calculateDuration(this.header);\n                    }\n                }\n                else if (err.message.startsWith('FourCC')) {\n                    if (this.pageNumber > 0) {\n                        // ignore this error: work-around if last OGG-page is not marked with last-page flag\n                        this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');\n                        await this.pageConsumer.flush();\n                    }\n                }\n            }\n            else\n                throw err;\n        }\n    }\n}\nOggParser.Header = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: FourCcToken.get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: Token.UINT8.get(buf, off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\n//# sourceMappingURL=OggParser.js.map","import * as Token from 'token-types';\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken {\n    static fromBase64(base64str) {\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        offset += 4;\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\n        offset += mimeLen;\n        const descLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\n        offset += descLen;\n        const width = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const height = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const data = Uint8Array.from(buffer.slice(offset, offset + picDataLen));\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: Token.UINT8.get(buf, off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexport const IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        return {\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\n        };\n    }\n};\n//# sourceMappingURL=Vorbis.js.map","import * as Token from 'token-types';\nexport class VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = new TextDecoder('utf-8').decode(this.data.subarray(this.offset, this.offset + len));\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.slice(0, idx).toUpperCase(),\n            value: v.slice(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\n//# sourceMappingURL=VorbisDecoder.js.map","import * as Token from 'token-types';\nimport debugInit from 'debug';\nimport { VorbisDecoder } from './VorbisDecoder.js';\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\n}\n/**\n * Vorbis 1 Parser.\n * Used by OggParser\n */\nexport class VorbisParser {\n    constructor(metadata, options) {\n        this.metadata = metadata;\n        this.options = options;\n        this.pageSegments = [];\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new VorbisContentError('Cannot continue on previous page');\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = VorbisParser.mergeUint8Arrays(this.pageSegments);\n                    await this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.calculateDuration(header);\n        }\n    }\n    static mergeUint8Arrays(arrays) {\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\n        const merged = new Uint8Array(totalSize);\n        arrays.forEach((array, i, _arrays) => {\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\n            merged.set(array, offset);\n        });\n        return merged;\n    }\n    async flush() {\n        await this.parseFullPage(VorbisParser.mergeUint8Arrays(this.pageSegments));\n    }\n    async parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        await this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    async addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(\"Ignore picture\");\n                return;\n            }\n            value = VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        await this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);\n            this.metadata.setFormat('duration', header.absoluteGranulePosition / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param header\n     * @param pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        debug('Parse first page');\n        // Parse  Vorbis common header\n        const commonHeader = CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new VorbisContentError('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\n    }\n    async parseFullPage(pageData) {\n        // New page\n        const commonHeader = CommonHeader.get(pageData, 0);\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    async parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += (await this.parseUserComment(pageData, offset));\n        }\n    }\n}\n//# sourceMappingURL=VorbisParser.js.map"],"names":["OpusContentError","IdHeader","constructor","len","this","get","buf","off","magicSignature","version","channelCount","preSkip","inputSampleRate","outputGain","channelMapping","OpusParser","VorbisParser","metadata","options","tokenizer","super","idHeader","lastPos","parseFirstPage","header","pageData","setFormat","length","parseFullPage","parseUserCommentList","position","calculateDuration","format","sampleRate","absoluteGranulePosition","pos_48bit","fileInfo","size","duration","dataSize","debug","SpeexParser","speexHeader","speex","version_id","header_size","rate","mode","mode_bitstream_version","nb_channels","bitrate","frame_size","vbr","frames_per_packet","extra_headers","reserved1","reserved2","TheoraParser","parsePage","headerType","firstPage","flush","id","vmaj","vmin","vrev","vmbw","vmbh","nombr","nqual","OggContentError","SegmentTable","sum","dv","DataView","buffer","s","i","getUint8","page_segments","totalPageSize","OggParser","BasicParser","arguments","pageNumber","pageConsumer","parse","readToken","Header","capturePattern","pageSequenceNo","segmentTable","lastPage","continued","TextDecoder","decode","subarray","err","Error","addWarning","message","startsWith","Number","streamSerialNumber","pageChecksum","VorbisPictureToken","fromBase64","base64str","fromBuffer","Uint8Array","from","atob","c","charCodeAt","offset","type","mimeLen","descLen","description","width","height","colour_depth","indexed_color","picDataLen","data","slice","CommonHeader","packetType","vorbis","IdentificationHeader","uint8Array","channelMode","bitrateMax","bitrateNominal","bitrateMin","VorbisDecoder","readInt32","value","readStringUtf8","parseUserComment","offset0","v","idx","indexOf","key","toUpperCase","VorbisContentError","pageSegments","push","fullPage","mergeUint8Arrays","arrays","totalSize","reduce","acc","e","merged","forEach","array","_arrays","set","tag","addTag","skipCovers","commonHeader","byteLength","strLen","userCommentListLength"],"sourceRoot":""}