"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkaudioshop"] = self["webpackChunkaudioshop"] || []).push([["node_modules_music-metadata_lib_amr_AmrParser_js"],{

/***/ "./node_modules/music-metadata/lib/amr/AmrParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/amr/AmrParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AmrParser: () => (/* binding */ AmrParser)\n/* harmony export */ });\n/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/BasicParser.js */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\n/* harmony import */ var _AmrToken_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AmrToken.js */ \"./node_modules/music-metadata/lib/amr/AmrToken.js\");\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_2__('music-metadata:parser:AMR');\n/**\n * There are 8 varying levels of compression. First byte of the frame specifies CMR\n * (codec mode request), values 0-7 are valid for AMR. Each mode have different frame size.\n * This table reflects that fact.\n */\nconst m_block_size = [12, 13, 15, 17, 19, 20, 26, 31, 5, 0, 0, 0, 0, 0, 0, 0];\n/**\n * Adaptive Multi-Rate audio codec\n */\nclass AmrParser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_0__.BasicParser {\n    async parse() {\n        const magicNr = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_1__.AnsiStringType(5));\n        if (magicNr !== '#!AMR') {\n            throw new Error('Invalid AMR file: invalid MAGIC number');\n        }\n        this.metadata.setFormat('container', 'AMR');\n        this.metadata.setFormat('codec', 'AMR');\n        this.metadata.setFormat('sampleRate', 8000);\n        this.metadata.setFormat('bitrate', 64000);\n        this.metadata.setFormat('numberOfChannels', 1);\n        let total_size = 0;\n        let frames = 0;\n        const assumedFileLength = this.tokenizer.fileInfo?.size ?? Number.MAX_SAFE_INTEGER;\n        if (this.options.duration) {\n            while (this.tokenizer.position < assumedFileLength) {\n                const header = await this.tokenizer.readToken(_AmrToken_js__WEBPACK_IMPORTED_MODULE_3__.FrameHeader);\n                /* first byte is rate mode. each rate mode has frame of given length. look it up. */\n                const size = m_block_size[header.frameType];\n                if (size > 0) {\n                    total_size += size + 1;\n                    if (total_size > assumedFileLength)\n                        break;\n                    await this.tokenizer.ignore(size);\n                    ++frames;\n                }\n                else {\n                    debug(`Found no-data frame, frame-type: ${header.frameType}. Skipping`);\n                }\n            }\n            this.metadata.setFormat('duration', frames * 0.02);\n        }\n    }\n}\n//# sourceMappingURL=AmrParser.js.map\n\n//# sourceURL=webpack://audioshop/./node_modules/music-metadata/lib/amr/AmrParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/amr/AmrToken.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/amr/AmrToken.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrameHeader: () => (/* binding */ FrameHeader)\n/* harmony export */ });\n/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Util.js */ \"./node_modules/music-metadata/lib/common/Util.js\");\n\n/**\n * ID3v2 header\n * Ref: http://id3.org/id3v2.3.0#ID3v2_header\n * ToDo\n */\nconst FrameHeader = {\n    len: 1,\n    get: (buf, off) => {\n        return {\n            frameType: (0,_common_Util_js__WEBPACK_IMPORTED_MODULE_0__.getBitAllignedNumber)(buf, off, 1, 4)\n        };\n    }\n};\n//# sourceMappingURL=AmrToken.js.map\n\n//# sourceURL=webpack://audioshop/./node_modules/music-metadata/lib/amr/AmrToken.js?");

/***/ })

}]);